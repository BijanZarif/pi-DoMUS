#import PetscBinaryIO
import numpy as np
from sympy import *

def function_to_cpp_source(func,directory,filename,classname):
    dim = func.shape[0]
    template = '<'+str(dim)+','+str(dim)+','+'1'+'>'
    out_file = open (directory+filename+'.cpp', 'w')
    out_file.write('/*\n')
    out_file.write(' * stk_force_3d.cpp\n')
    out_file.write(' *\n')
    out_file.write(' *  Created on: Mar 24, 2014\n')
    out_file.write(' *      Author: nicola\n')
    out_file.write(' */\n')
    out_file.write('#include "'+filename+'.h"\n')
    
    out_file.write('void '+classname+'::evaluate(const std::vector< typename Function'+template+'::PointType > & 	points,\n')
    out_file.write('                   std::vector< typename Function'+template+'::ValueType > & values) const\n')
    out_file.write('{\n')
    out_file.write('    for (uint i =0; i<points.size(); i++)\n')
    out_file.write('    {\n')
    out_file.write('        double x = points[i][0];\n')
    out_file.write('        double y = points[i][1];\n')
    out_file.write('        double z = points[i][2];\n')
    for i in range (0,dim):
        out_file.write('        values[i]['+str(i)+'] = '+ccode(func[i,0])+';\n')
    out_file.write('    }\n')
    out_file.write('};\n')
    return

def function_to_cpp_header(dim_domain,func,directory,filename,classname):
    dim = func.shape[0]
    template = '<'+str(dim_domain)+','+str(dim)+','+'1'+'>'
    out_file = open (directory+filename+'.h', 'w')
    out_file.write('/*\n')
    out_file.write(' * '+filename+'.h\n')
    out_file.write(' *\n')
    out_file.write(' *  Created on: Mar 24, 2014\n')
    out_file.write(' *      Author: nicola\n')
    out_file.write(' */\n')
    out_file.write('\n')
    out_file.write('#ifndef '+filename+'_h_\n')
    out_file.write('#define '+filename+'_h_\n')
    out_file.write('\n')
    out_file.write('#include <igatools/base/function.h>\n')
    out_file.write('\n')
    out_file.write('using namespace iga;\n')
    out_file.write('using namespace std;\n')
    out_file.write('\n')
    out_file.write('class '+classname+' : public Function'+template+'\n')
    out_file.write('{\n')
    out_file.write('\n')
    out_file.write('public:\n')
    out_file.write('    '+classname+' () : Function'+template+'() {}\n')
    out_file.write('\n')
    out_file.write('    void evaluate(const ValueVector< typename Function'+template+'::Point > &points,\n')
    out_file.write('                  ValueVector< typename Function'+template+'::Value > &values)		 const\n')
    out_file.write('    {\n')
    out_file.write('        for (uint i =0; i<points.size(); i++)\n')
    out_file.write('        {\n')
    out_file.write('            double x = points[i][0];\n')
    out_file.write('            double y = points[i][1];\n')
    out_file.write('            double z = points[i][2];\n')
    out_file.write('\n')
    for i in range (0,dim):
        out_file.write('            values[i]['+str(i)+'] = '+ccode(func[i,0])+';\n')
    out_file.write('        }\n')
    out_file.write('    };\n')
    out_file.write('    static shared_ptr<const Function'+template+'>\n')
    out_file.write('                                            create()\n')
    out_file.write('    {\n')
    out_file.write('        return(shared_ptr<const Function'+template+'>(new '+classname+'())) ;\n')
    out_file.write('    }\n')
    out_file.write('};\n')
    out_file.write('\n')
    out_file.write('#endif /* '+filename+'_h_ */\n')
    out_file = open (directory+filename+'.cpp', 'w')
    out_file.write('/*\n')
    out_file.write(' * '+filename+'.cpp\n')
    out_file.write(' *\n')
    out_file.write(' *  Created on: Mar 24, 2014\n')
    out_file.write(' *      Author: nicola\n')
    out_file.write(' */\n')
    out_file.write('#include "'+filename+'.h"\n')
    return
