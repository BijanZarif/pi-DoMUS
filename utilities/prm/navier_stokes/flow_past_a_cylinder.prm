################################################################################
#   This parameter files solves for a navier stokes flow past a cylinder
################################################################################

subsection Navier Stokes
  set Block coupling                   = 1,1; 1,1
  set Block of differential components = 1,0
  set Blocking of the finite element   = u,u,p
  set Finite element space             = FESystem[FE_Q(2)^d-FE_Q(1)]
  set Preconditioner block coupling    = 0,0; 0,1
  set nu [Pa s]                        = 1
  set rho [kg m^3]                     = 1.0
  set grad-div stabilization           = 1.0

  # set Preconditioner                   = default
  # set Preconditioner                   = diag
  # set Preconditioner                   = linear
  # set Preconditioner                   = diag_linear
  # set Preconditioner                   = BFBt_identity
  # set Preconditioner                   = BFBt_diagA
  set Preconditioner                   = cahouet-chabard
end

subsection piDoMUS<2, 2, 3, LATrilinos>
  set Adaptive refinement                            = false
  set Initial global refinement                      = 1
  set Maximum number of time steps                   = 10000
  set Number of cycles                               = 1
  set Timer output file                              = timer.txt
  set Use direct solver if available                 = true
  set Overwrite Newton's iterations                  = false
  set Print some useful informations about processes = true
end

subsection Forcing terms
  set IDs and component masks =
  set IDs and expressions     =
  set Known component names   = u,u,p
  set Used constants          = k=1
end

subsection Dirichlet boundary conditions
  # set IDs and component masks = 1 = u % 2 = u % 4 = u
  # set IDs and expressions     = 1 = 0;0;0 % 2=y>3?10*(4-y)*y:(3-y)*y+(4-y)*y;0;0 % 4 = 0;0;0
  set IDs and component masks =  1= u % 5=u % 3=u % 4=u % 2=p
  set IDs and expressions     =  1= t<1.?t*(1-y^2):(1-y^2);0;0 % 3=0;0;0 % 4=0;0;0 % 5=0;0;0 % 2=0;0;0
  set Known component names   = u,u,p
  set Used constants          = k=1e-5
end

subsection Neumann boundary conditions
  set IDs and component masks =
  set IDs and expressions     =
  set Known component names   = u,u,p
  set Used constants          =
end

subsection Exact solution
  set Function constants  =
  set Function expression = 0; 0; 0
  set Variable names      = x, y, t
end

subsection Domain
  set Grid to generate           = file
  set Input grid file name       = \
      ../utilities/grids/rectangle_with_circular_hole.ucd
  set Mesh smoothing alogrithm   = none
  set Optional Point<spacedim> 1 = 0,0
  set Optional Point<spacedim> 2 = 1,1
  set Colorize                   = true
  set Optional double 1          = 1.
  set Optional double 2          = 0.5
  set Optional int 1             = 1
  set Optional vector of dim int = 1,1
  set Output grid file name      = true
end

subsection Refinement
  set Bottom fraction                        = 0.100000
  set Maximum number of cells (if available) = 500
  set Order (optimize)                       = 2
  set Refinement strategy                    = fraction
  set Top fraction                           = 0.300000
end

subsection Error Tables
  set Compute error            = false
  set Error file format        = tex
  set Output error tables      = true
  set Solution names           = u,u,p
  set Solution names for latex = u,u,p
  set Table names              = error
  set Write error files        = false
  subsection Table 0
    set Add convergence rates          = true
    set Extra terms                    = cells,dofs
    set Latex table caption            = error
    set List of error norms to compute = L2, Linfty, H1; AddUp; L2
    set Rate key                       =
  end
end

subsection IDA Solver Parameters
  set Absolute error tolerance                      = 1e-3
  set Final time                                    = 20
  set Ignore algebraic terms for error computations = true
  set Initial condition Newton max iterations       = 5
  set Initial condition Newton parameter            = 0.33
  set Initial condition type                        = use_y_diff
  set Initial condition type after restart          = use_y_dot
  set Initial step size                             = 1e-4
  set Initial time                                  = 0
  set Maximum number of nonlinear iterations        = 10
  set Maximum order of BDF                          = 2
  set Min step size                                 = 5e-5
  set Relative error tolerance                      = 1e-3
  set Seconds between each output                   = 1e-1
  set Show output of time steps                     = true
  set Use local tolerances                          = false
end

subsection Initial solution
  set Function constants  =
  set Function expression = 0;0;0
  set Variable names      = x,y,t
end

subsection Initial solution_dot
  set Function constants  =
  set Function expression = 0;0;0
  set Variable names      = x,y,t
end

subsection Output Parameters
  set Incremental run prefix =
  set Output format          = vtu
  set Output partitioning    = false
  set Problem base name      = solution
  set Solution names         = u
  set Subdivisions           = 1
end
