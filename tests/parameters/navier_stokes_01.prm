# Listing of Parameters
# ---------------------
subsection Dirichlet boundary conditions
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     =

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          =
end


subsection Domain
  # The grid to generate. You can choose among:
  # - file: read grid from a file using:
  # 	- Input grid filename	    : input filename
  #
  # - rectangle: create a subdivided hyperrectangle using:
  # 	- Optional Point<spacedim> 1: left corner
  # 	- Optional Point<spacedim> 2: right corner
  # 	- Optional Vector of dim int: subdivisions on each direction
  # 	- Optional bool 1	    : colorize grid
  set Grid to generate           = rectangle

  # Name of the input grid. All supported deal.II formats. The extestion will
  # be used to decide what grid format to use.
  set Input grid file name       =
  set Mesh smoothing alogrithm   = none

  # First additional Point<spacedim> to be used in the generation of the grid.
  # The use of it will depend on the specific grid.
  set Optional Point<spacedim> 1 = 0,0

  # Second additional Point<spacedim> to be used in the generation of the
  # grid. The use of it will depend on the specific grid.
  set Optional Point<spacedim> 2 = 1,1

  # Bool be used in the generation of the grid. The use of it will depend on
  # the specific grid.
  set Optional bool 1            = false

  # First additional double to be used in the generation of the grid. The use
  # of it will depend on the specific grid.
  set Optional double 1          = 1.

  # Second additional double to be used in the generation of the grid. The use
  # of it will depend on the specific grid.
  set Optional double 2          = 0.5

  # Unsigned int to be used in the generation of the grid. The use of it will
  # depend on the specific grid.
  set Optional int 1             = 1

  # Vector of positive unsigned int to be used in the generation of the grid.
  # The use of it will depend on the specific grid.
  set Optional vector of dim int = 1,1

  # Name of the output grid. All supported deal.II formats. The extestion will
  # be used to decide what grid format to use. If empty, no grid will be
  # written.
  set Output grid file name      =
end


subsection Error Tables
  set Compute error            = true
  set Error file format        = tex
  set Output error tables      = true
  # Comma separated list of names for the components. This will be used both
  # for error tables in text format and to output the solution to a file. Note
  # that in the case of a vector function the error name which is used to
  # compute the norm (supposing the type of the other components is 'Add') is
  # the first one.
  set Solution names           = u,u,p

  # Comma separated version of the same thing as above for the latex version
  # of the table.
  set Solution names for latex = u,u,p

  # Comma separated list of table names.
  set Table names              = error
  set Write error files        = false


  subsection Table 0
    # Evaluate convergence rates and add a column to the table for each
    # computed norm.
    set Add convergence rates          = true

    # The extra columns to add to the table.
    set Extra terms                    = cells,dofs

    # The caption that will go under the table if we write the file in tex
    # format. The default value for this object is the same name as the table
    # name.
    set Latex table caption            = error

    # Each component is separated by a semicolon, and each norm by a comma.
    # Implemented norms are Linfty, L2, H1, AddUp, which means that the norm
    # is added to the previous component, and Custom.
    set List of error norms to compute = L2,H1;L2,H1;L2,H1

    # The key to use to compute the convergence rates.
    set Rate key                       =
  end

end


subsection Exact solution
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  #
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  =

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  #
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection Forcing terms
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     =

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          =
end


subsection IDA Solver Parameters
  set Absolute error tolerance                      = 1e-4
  set Final time                                    = 1
  # Indicate whether or not to suppress algebraic variables in the local error
  # test.
  set Ignore algebraic terms for error computations = false
  set Initial condition Newton max iterations       = 5
  set Initial condition Newton parameter            = 0.33

  # This is one of the following thress options for the initial condition
  # calculation.
  # none: do not try to make initial conditions consistent.
  # use_y_diff: compute the algebraic components of y and differential
  # components of y_dot, given the differential components of y.
  # This option requires that the user specifies differential and
  # algebraic components in the function get_differential_components.
  # use_y_dot: compute all components of y, given y_dot.
  set Initial condition type                        = use_y_diff
  set Initial step size                             = 1e-4
  set Initial time                                  = 0
  set Maximum number of nonlinear iterations        = 10
  set Maximum order of BDF                          = 5
  set Min step size                                 = 5e-5
  set Relative error tolerance                      = 1e-3
  set Seconds between each output                   = 1e-1
  set Use local tolerances                          = false
end


subsection Initial solution
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  #
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  =

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  #
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection Initial solution_dot
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  #
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  =

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the muparser library at http://muparser.beltoforion.de/.
  #
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection NFieldsProblem<2, 2, 3, LATrilinos>
  set Adaptive refinement            = true
  set Initial global refinement      = 1
  set Maximum number of time steps   = 10000
  set Number of cycles               = 3
  set Timer output file              = timer.txt
  set Use direct solver if available = false
end


subsection Navier Stokes
  # Coupling between the blocks of the finite elements in the system:
  # 0: No coupling
  # 1: Full coupling
  # 2: Coupling only on faces
  set Block coupling                   = 1,1; 1,0

  # Set the blocks of differential components to 10 for algebraic
  set Block of differential components = 1,0

  # How to partition the finite element. This information can be used to
  # construct block matrices and vectors, as well as to create names for
  # solution vectors, or error tables. A repeated component is interpreted as
  # a vector field, with dimension equal to the number of repetitions (up to
  # 3). This is used in conjunction with a ParsedFiniteElement class, to
  # generate arbitrary finite dimensional spaces.
  set Blocking of the finite element   = u,u,p

  # The finite element space to use. For vector finite elements use the
  # notation FESystem[FE_Q(2)^2-FE_DGP(1)] (e.g. Navier-Stokes).
  set Finite element space             = FESystem[FE_Q(2)^d-FE_Q(1)]

  # Coupling between the blocks of the finite elements in the preconditioner:
  # 0: No coupling
  # 1: Full coupling
  # 2: Coupling only on faces
  set Preconditioner block coupling    = 1,0; 0,1
  set eta [Pa s]                       = 1.0
  set rho [Kg m^-d]                    = 1.0
end


subsection Neumann boundary conditions
  # Pattern to be used id followed by '=' component masks separated by ';'
  # each couple of id and mask is separated by '%' 0=0;1;2 % 4=u;p % 2=3 %
  # 5=ALL You can specify the components either by numbers or by the
  # corrisponding variable name, which are parsed at construction time. The
  # keyword 'ALL' means all the components. Normal component is referred with
  # suffix N e.g. uN means the normal component of u. note that the normal
  # component can be set only for a vector variable.
  set IDs and component masks = 0=ALL

  # Pattern to be used  id followed by '=' component separated by ';' each
  # couple of id and expression _id_functions separated by '%' 0=x;y;k;0 %
  # 4=sin(x);cos(y);2*k;1 % 2=0;0;0;0 If it is left empty, a
  # ZeroFunction<dim>(n_components) is applied on the parsed ids in the
  # components.
  set IDs and expressions     =

  # These variables can be used to set the corrisponding component mask,
  # instead of specifying each component number
  set Known component names   = u,u,p

  # Costants which are employed in the definitions of the function
  # expressions. The pattern to be used is constant_name=value ,
  # other_constant=other_value
  set Used constants          =
end


subsection Output Parameters
  set Incremental run prefix =
  set Output partitioning    = false
  set Problem base name      = solution
  # Comma separated list of names for the components. If a name is repeated,
  # then the repeated names are grouped into vectors.
  set Solution names         = u


  subsection Solution output format
    # A name for the output format to be used
    set Output format = vtu # default: gnuplot

    # Number of subdivisions of each mesh cell
    set Subdivisions  = 1


    subsection DX output parameters
      # Output format of vertex coordinates, which is either a text
      # representation (ascii) or binary floating point values of 32 or 64
      # bits length
      set Coordinates format = ascii

      # Output format of data values, which is either a text representation
      # (ascii) or binary floating point values of 32 or 64 bits length
      set Data format        = ascii

      # Output format of integer numbers, which is either a text
      # representation (ascii) or binary integer values of 32 or 64 bits
      # length
      set Integer format     = ascii

      # A boolean field indicating whether neighborship information between
      # cells is to be written to the OpenDX output file
      set Write neighbors    = true
    end

    subsection Eps output parameters
      # Angle of the viewing position against the vertical axis
      set Azimut angle                        = 60

      # Name of a color function used to colorize mesh lines and/or cell
      # interiors
      set Color function                      = default

      # Whether the interior of cells shall be shaded
      set Color shading of interior of cells  = true

      # Whether the mesh lines, or only the surface should be drawn
      set Draw mesh lines                     = true

      # Whether only the mesh lines, or also the interior of cells should be
      # plotted. If this flag is false, then one can see through the mesh
      set Fill interior of cells              = true

      # Number of the input vector that is to be used to generate color
      # information
      set Index of vector for color           = 0

      # Number of the input vector that is to be used to generate height
      # information
      set Index of vector for height          = 0

      # The width in which the postscript renderer is to plot lines
      set Line widths in eps units            = 0.5

      # Whether width or height should be scaled to match the given size
      set Scale to width or height            = width

      # Scaling for the z-direction relative to the scaling used in x- and
      # y-directions
      set Scaling for z-axis                  = 1

      # The size (width or height) to which the eps output file is to be
      # scaled
      set Size (width or height) in eps units = 300

      # Angle of the viewing direction against the y-axis
      set Turn angle                          = 30
    end

    subsection Gmv output parameters
    end

    subsection Gnuplot output parameters
    end

    subsection Povray output parameters
      # Whether camera and lighting information should be put into an external
      # file "data.inc" or into the POVRAY input file
      set Include external file = true

      # Whether POVRAY should use bicubic patches
      set Use bicubic patches   = false

      # A flag indicating whether POVRAY should use smoothed triangles instead
      # of the usual ones
      set Use smooth triangles  = false
    end

    subsection Tecplot output parameters
    end

    subsection UCD output parameters
      # A flag indicating whether a comment should be written to the beginning
      # of the output file indicating date and time of creation as well as the
      # creating program
      set Write preamble = true
    end

    subsection Vtk output parameters
    end

    subsection deal.II intermediate output parameters
    end

  end

end
